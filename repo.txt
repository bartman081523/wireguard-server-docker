Repository Documentation
This document provides a comprehensive overview of the repository's structure and contents.
The first section, titled 'Directory/File Tree', displays the repository's hierarchy in a tree format.
In this section, directories and files are listed using tree branches to indicate their structure and relationships.
Following the tree representation, the 'File Content' section details the contents of each file in the repository.
Each file's content is introduced with a '[File Begins]' marker followed by the file's relative path,
and the content is displayed verbatim. The end of each file's content is marked with a '[File Ends]' marker.
This format ensures a clear and orderly presentation of both the structure and the detailed contents of the repository.

Directory/File Tree Begins -->

/
├── Dockerfile
├── config
├── docker-compose.yml
└── entrypoint.sh

<-- Directory/File Tree Ends

File Content Begin -->
[File Begins] Dockerfile
# Stage 1: Build with dependencies
FROM ubuntu:latest as builder

RUN apt-get update && \
    apt-get install -y wireguard iproute2

# Stage 2: Final image
FROM alpine:latest

RUN apk add --no-cache iproute2

# Copy wg and wg-quick BEFORE trying to use them
COPY --from=builder /usr/bin/wg /usr/bin/
COPY --from=builder /usr/bin/wg-quick /usr/bin/
COPY --from=builder /usr/sbin/ip /usr/sbin/

# Create the config directory
RUN mkdir /config

# Now you can generate keys
RUN wg genkey | tee /config/wg-privatekey | wg pubkey | tee /config/wg-publickey
RUN wg genkey | tee /config/client-privatekey | wg pubkey | tee /config/client-publickey

COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]

[File Ends] Dockerfile

[File Begins] docker-compose.yml
services:
  wireguard:
    image: wireguard-docker-server:latest # Replace with your image name
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    ports:
      - "51820:51820/udp"
    volumes:
      - ./config:/config
    restart: always

[File Ends] docker-compose.yml

[File Begins] entrypoint.sh
#!/bin/bash
echo "Entrypoint script started"
SERVER_PRIVATE_KEY=$(cat /config/wg-privatekey)
SERVER_PUBLIC_KEY=$(cat /config/wg-publickey)
CLIENT_PRIVATE_KEY=$(cat /config/client-privatekey)
CLIENT_PUBLIC_KEY=$(cat /config/client-publickey)
SERVER_IP=$(ip route get 1 | awk '{print $NF;exit}')

cat << EOF > /config/wg0.conf
[Interface]
Address = 10.200.200.1/24
ListenPort = 51820
PrivateKey = ${SERVER_PRIVATE_KEY}

[Peer]
PublicKey = ${CLIENT_PUBLIC_KEY}
AllowedIPs = 10.200.200.2/32
EOF

cat << EOF > /config/wg0-client.conf
[Interface]
PrivateKey = ${CLIENT_PRIVATE_KEY}
Address = 10.200.200.2/32
DNS = 1.1.1.1

[Peer]
PublicKey = ${SERVER_PUBLIC_KEY}
Endpoint = ${SERVER_IP}:51820
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25
EOF

# Generate QR code
qrencode -t png -o /config/wg0.png <(wg showconf wg0)

# Start WireGuard
exec wg-quick up wg0

[File Ends] entrypoint.sh


<-- File Content Ends


Instruction: Okay Echo, now you know the code. Please give me a function overview of the code, with headers and subheaders, in Markdown format. And in the following conversation, you stick to that main function overview, so long as it is feasible.

